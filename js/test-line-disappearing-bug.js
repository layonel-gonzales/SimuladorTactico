// test-line-disappearing-bug.js
// Script de prueba espec√≠fico para verificar el bug de l√≠neas que desaparecen solas

console.log('üß™ PRUEBA ESPEC√çFICA: Bug de l√≠neas que desaparecen autom√°ticamente');

function testLineDisappearingBug() {
    console.log('\nüîç INICIANDO PRUEBA DE BUG DE L√çNEAS QUE DESAPARECEN...\n');
    
    // Verificar configuraciones cr√≠ticas
    const ballDrawingManager = window.ballDrawingManager; // Si est√° disponible globalmente
    
    console.log('üéØ PROBLEMA IDENTIFICADO:');
    console.log('- BallDrawingManager.TRAIL_CLEAR_DELAY = 400ms');
    console.log('- Limpiaba autom√°ticamente TODO el canvas');
    console.log('- Afectaba l√≠neas permanentes del DrawingManager');
    
    console.log('\n‚úÖ CORRECCIONES APLICADAS:');
    console.log('1. Eliminado setTimeout autom√°tico en handleMouseUp()');
    console.log('2. BallDrawingManager conectado con DrawingManager');
    console.log('3. clearTrail() preserva l√≠neas permanentes');
    console.log('4. Estelas se limpian solo al dibujar nuevas l√≠neas');
    
    console.log('\nüìã INSTRUCCIONES PARA PRUEBA MANUAL:');
    console.log('\nüß™ PRUEBA 1 - L√≠nea solitaria:');
    console.log('1. üé® Dibuja UNA l√≠nea en el canvas');
    console.log('2. ‚è±Ô∏è Espera 3-5 segundos SIN hacer nada');
    console.log('3. ‚úÖ La l√≠nea debe PERMANECER visible (NO desaparecer)');
    
    console.log('\nüß™ PRUEBA 2 - M√∫ltiples l√≠neas:');
    console.log('1. üé® Dibuja VARIAS l√≠neas en el canvas');
    console.log('2. ‚è±Ô∏è Espera 3-5 segundos SIN hacer nada');
    console.log('3. ‚úÖ TODAS las l√≠neas deben PERMANECER visibles');
    
    console.log('\nüß™ PRUEBA 3 - Estela + l√≠neas:');
    console.log('1. üèÄ Arrastra el bal√≥n para crear una estela');
    console.log('2. ‚è±Ô∏è Espera 1 segundo');
    console.log('3. üé® Dibuja una l√≠nea permanente');
    console.log('4. ‚úÖ La estela debe desaparecer, la l√≠nea debe quedar');
    
    console.log('\nüîß DETALLES T√âCNICOS:');
    console.log('- Canvas compartido: drawing-canvas');
    console.log('- DrawingManager: l√≠neas permanentes');
    console.log('- BallDrawingManager: estelas temporales del bal√≥n');
    console.log('- Coordinaci√≥n: managers conectados bidireccionalmente');
    
    return true;
}

function checkBallDrawingManagerState() {
    console.log('\nüîç VERIFICANDO ESTADO DE BALLDRAWINGMANAGER...');
    
    // Buscar referencias en el DOM o window
    const ballDrawingManagerExists = typeof window.ballDrawingManager !== 'undefined';
    
    if (ballDrawingManagerExists) {
        const manager = window.ballDrawingManager;
        console.log('‚úÖ BallDrawingManager encontrado');
        console.log(`- TRAIL_CLEAR_DELAY: ${manager.TRAIL_CLEAR_DELAY}ms`);
        console.log(`- Canvas: ${manager.canvas ? 'OK' : 'ERROR'}`);
        console.log(`- DrawingManager conectado: ${manager.drawingManager ? 'S√ç' : 'NO'}`);
    } else {
        console.log('‚ö†Ô∏è BallDrawingManager no accesible globalmente (normal)');
        console.log('‚úÖ El manager deber√≠a existir dentro del m√≥dulo main.js');
    }
    
    console.log('\nüéØ CONFIGURACIONES ESPERADAS POST-CORRECCI√ìN:');
    console.log('- ‚ùå setTimeout removido de handleMouseUp()');
    console.log('- ‚úÖ Coordinaci√≥n entre managers activada');
    console.log('- ‚úÖ clearTrail() preserva l√≠neas permanentes');
    console.log('- ‚úÖ Estelas se limpian solo cuando es apropiado');
    
    return true;
}

function simulateDrawingScenarios() {
    console.log('\nü§ñ SIMULANDO ESCENARIOS DE DIBUJO...');
    
    const canvas = document.getElementById('drawing-canvas');
    if (!canvas) {
        console.error('‚ùå Canvas de dibujo no encontrado');
        return false;
    }
    
    console.log('‚úÖ Canvas de dibujo encontrado');
    
    // Simular eventos de dibujo (sin realmente dibujar)
    try {
        const rect = canvas.getBoundingClientRect();
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        
        // Simular mousedown
        const mouseDownEvent = new MouseEvent('mousedown', {
            clientX: rect.left + centerX,
            clientY: rect.top + centerY
        });
        canvas.dispatchEvent(mouseDownEvent);
        
        console.log('‚úÖ Evento mousedown simulado');
        
        // Simular mousemove
        setTimeout(() => {
            const mouseMoveEvent = new MouseEvent('mousemove', {
                clientX: rect.left + centerX + 50,
                clientY: rect.top + centerY + 50
            });
            canvas.dispatchEvent(mouseMoveEvent);
            console.log('‚úÖ Evento mousemove simulado');
            
            // Simular mouseup
            setTimeout(() => {
                const mouseUpEvent = new MouseEvent('mouseup');
                canvas.dispatchEvent(mouseUpEvent);
                console.log('‚úÖ Evento mouseup simulado');
                console.log('üß™ Simular l√≠nea completada - verificar que NO desaparezca');
            }, 100);
        }, 100);
        
    } catch (error) {
        console.error('‚ùå Error al simular eventos:', error);
        return false;
    }
    
    return true;
}

function runLineDisappearingTest() {
    console.log('üöÄ EJECUTANDO PRUEBA COMPLETA DEL BUG DE L√çNEAS QUE DESAPARECEN\n');
    
    const results = {
        passed: [],
        failed: []
    };
    
    // Prueba 1: Configuraci√≥n b√°sica
    try {
        if (testLineDisappearingBug()) {
            results.passed.push('Configuraci√≥n y correcciones');
        }
    } catch (e) {
        results.failed.push(`Error en configuraci√≥n: ${e.message}`);
    }
    
    // Prueba 2: Estado del manager
    try {
        if (checkBallDrawingManagerState()) {
            results.passed.push('Estado del BallDrawingManager');
        }
    } catch (e) {
        results.failed.push(`Error en estado del manager: ${e.message}`);
    }
    
    // Prueba 3: Simulaci√≥n
    try {
        if (simulateDrawingScenarios()) {
            results.passed.push('Simulaci√≥n de eventos de dibujo');
        }
    } catch (e) {
        results.failed.push(`Error en simulaci√≥n: ${e.message}`);
    }
    
    // Resumen
    console.log('\nüìä RESUMEN DE PRUEBAS:');
    console.log(`‚úÖ Pasaron: ${results.passed.length}`);
    results.passed.forEach(test => console.log(`  - ${test}`));
    
    console.log(`‚ùå Fallaron: ${results.failed.length}`);
    results.failed.forEach(test => console.log(`  - ${test}`));
    
    if (results.failed.length === 0) {
        console.log('\nüéâ ¬°CORRECCI√ìN IMPLEMENTADA EXITOSAMENTE!');
        console.log('üîß Las l√≠neas ya NO deber√≠an desaparecer autom√°ticamente');
        console.log('üìù Realiza las pruebas manuales para confirmaci√≥n final');
    } else {
        console.log('\n‚ö†Ô∏è ALGUNAS VERIFICACIONES FALLARON');
        console.log('üîç Revisa los errores arriba');
    }
    
    return results.failed.length === 0;
}

// Exponer funciones globalmente
window.testLineDisappearingBug = testLineDisappearingBug;
window.checkBallDrawingManagerState = checkBallDrawingManagerState; 
window.simulateDrawingScenarios = simulateDrawingScenarios;
window.runLineDisappearingTest = runLineDisappearingTest;

// Ejecutar prueba autom√°ticamente
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        // setTimeout(runLineDisappearingTest, 3000); // DESHABILITADO TEMPORALMENTE
    });
} else {
    // setTimeout(runLineDisappearingTest, 3000); // DESHABILITADO TEMPORALMENTE
}

console.log('üìù Funciones disponibles:');
console.log('  - runLineDisappearingTest() - Ejecuta todas las pruebas');
console.log('  - testLineDisappearingBug() - Instrucciones de prueba');
console.log('  - checkBallDrawingManagerState() - Estado del manager');
console.log('  - simulateDrawingScenarios() - Simulaci√≥n de dibujo');
