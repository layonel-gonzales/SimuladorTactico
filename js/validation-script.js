// validation-script.js
// Script para validar funcionalidades en tiempo real dentro de la aplicaci√≥n

console.log('üß™ Iniciando validaci√≥n en tiempo real de funcionalidades...');

// VALIDACI√ìN 1: Verificar que todos los elementos existen
function validateHTMLElements() {
    const requiredElements = [
        'global-mode-toggle',
        'global-select-squad-btn', 
        'fullscreen-toggle-btn',
        'drawing-mode-controls',
        'animation-mode-controls',
        'football-field',
        'drawing-canvas',
        'pitch-container',
        'frame-indicator',
        'audio-record-btn',
        'export-animation-json'
    ];
    
    const missing = [];
    requiredElements.forEach(id => {
        if (!document.getElementById(id)) {
            missing.push(id);
        }
    });
    
    if (missing.length > 0) {
        console.error('‚ùå Elementos HTML faltantes:', missing);
        return false;
    }
    console.log('‚úÖ Todos los elementos HTML est√°n presentes');
    return true;
}

// VALIDACI√ìN 2: Verificar que los canvas funcionan
function validateCanvas() {
    const footballField = document.getElementById('football-field');
    const drawingCanvas = document.getElementById('drawing-canvas');
    
    if (!footballField || !footballField.getContext) {
        console.error('‚ùå Canvas del campo de f√∫tbol no funciona');
        return false;
    }
    
    if (!drawingCanvas || !drawingCanvas.getContext) {
        console.error('‚ùå Canvas de dibujo no funciona');
        return false;
    }
    
    // Probar dibujo b√°sico
    try {
        const ctx = footballField.getContext('2d');
        ctx.fillStyle = 'red';
        ctx.fillRect(0, 0, 1, 1);
        console.log('‚úÖ Canvas funcionando correctamente');
        return true;
    } catch (e) {
        console.error('‚ùå Error al probar canvas:', e);
        return false;
    }
}

// VALIDACI√ìN 3: Verificar clases de CSS cr√≠ticas
function validateCSS() {
    const testElement = document.createElement('div');
    testElement.className = 'player-token';
    document.body.appendChild(testElement);
    
    const styles = window.getComputedStyle(testElement);
    const hasStyles = styles.position !== 'static' || styles.zIndex !== 'auto';
    
    document.body.removeChild(testElement);
    
    if (hasStyles) {
        console.log('‚úÖ CSS de jugadores funcionando');
        return true;
    } else {
        console.warn('‚ö†Ô∏è Algunos estilos CSS pueden no estar cargados');
        return false;
    }
}

// VALIDACI√ìN 4: Verificar JavaScript modules
function validateJavaScriptModules() {
    const expectedGlobals = [
        'ensureBallInPlayers',
        'importAnimationData',
        'shareManager'
    ];
    
    const missing = [];
    expectedGlobals.forEach(global => {
        if (typeof window[global] === 'undefined') {
            missing.push(global);
        }
    });
    
    if (missing.length > 0) {
        console.warn('‚ö†Ô∏è Funciones globales faltantes:', missing);
        return false;
    }
    
    console.log('‚úÖ M√≥dulos JavaScript cargados correctamente');
    return true;
}

// VALIDACI√ìN 5: Probar funcionalidad de modo
function validateModeSwitch() {
    const modeButton = document.getElementById('global-mode-toggle');
    if (!modeButton) {
        console.error('‚ùå Bot√≥n de cambio de modo no encontrado');
        return false;
    }
    
    // Verificar que el bot√≥n sea clickeable
    if (typeof modeButton.click !== 'function') {
        console.error('‚ùå Bot√≥n de modo no es clickeable');
        return false;
    }
    
    console.log('‚úÖ Bot√≥n de cambio de modo funcional');
    return true;
}

// VALIDACI√ìN 6: Verificar renderizado de jugadores
function validatePlayerRendering() {
    const pitchContainer = document.getElementById('pitch-container');
    if (!pitchContainer) {
        console.error('‚ùå Contenedor del campo no encontrado');
        return false;
    }
    
    // Buscar tokens de jugadores existentes
    const playerTokens = pitchContainer.querySelectorAll('.player-token');
    
    if (playerTokens.length === 0) {
        console.warn('‚ö†Ô∏è No hay jugadores renderizados en el campo');
        return false;
    }
    
    console.log(`‚úÖ ${playerTokens.length} jugadores renderizados en el campo`);
    return true;
}

// VALIDACI√ìN 7: Probar APIs del navegador
function validateBrowserAPIs() {
    const apis = {
        'LocalStorage': () => typeof Storage !== 'undefined',
        'MediaRecorder': () => typeof MediaRecorder !== 'undefined',
        'Canvas 2D': () => document.createElement('canvas').getContext('2d'),
        'FileReader': () => typeof FileReader !== 'undefined',
        'Blob': () => typeof Blob !== 'undefined'
    };
    
    const unsupported = [];
    Object.entries(apis).forEach(([name, test]) => {
        try {
            if (!test()) {
                unsupported.push(name);
            }
        } catch (e) {
            unsupported.push(name);
        }
    });
    
    if (unsupported.length > 0) {
        console.warn('‚ö†Ô∏è APIs del navegador no soportadas:', unsupported);
        return false;
    }
    
    console.log('‚úÖ Todas las APIs del navegador est√°n disponibles');
    return true;
}

// FUNCI√ìN PRINCIPAL DE VALIDACI√ìN
function runCompleteValidation() {
    console.log('\nüöÄ EJECUTANDO VALIDACI√ìN COMPLETA DEL SIMULADOR T√ÅCTICO\n');
    
    const tests = [
        { name: 'Elementos HTML', test: validateHTMLElements },
        { name: 'Canvas', test: validateCanvas },
        { name: 'CSS', test: validateCSS },
        { name: 'M√≥dulos JavaScript', test: validateJavaScriptModules },
        { name: 'Cambio de modo', test: validateModeSwitch },
        { name: 'Renderizado de jugadores', test: validatePlayerRendering },
        { name: 'APIs del navegador', test: validateBrowserAPIs }
    ];
    
    let passed = 0;
    let failed = 0;
    let warnings = 0;
    
    tests.forEach(({ name, test }) => {
        console.log(`\nüß™ Probando: ${name}`);
        try {
            const result = test();
            if (result === true) {
                passed++;
            } else {
                warnings++;
            }
        } catch (error) {
            console.error(`‚ùå Error en ${name}:`, error);
            failed++;
        }
    });
    
    console.log('\nüìä RESUMEN DE VALIDACI√ìN:');
    console.log(`‚úÖ Pasadas: ${passed}`);
    console.log(`‚ö†Ô∏è Advertencias: ${warnings}`);
    console.log(`‚ùå Fallidas: ${failed}`);
    
    const totalScore = (passed / tests.length) * 100;
    console.log(`üéØ Puntuaci√≥n total: ${totalScore.toFixed(1)}%`);
    
    if (totalScore >= 85) {
        console.log('üéâ ¬°LA APLICACI√ìN EST√Å FUNCIONANDO CORRECTAMENTE!');
    } else if (totalScore >= 70) {
        console.log('‚ö†Ô∏è La aplicaci√≥n funciona pero tiene algunos problemas menores');
    } else {
        console.log('‚ùå La aplicaci√≥n tiene problemas significativos que requieren atenci√≥n');
    }
    
    return { passed, warnings, failed, totalScore };
}

// FUNCI√ìN PARA PROBAR FUNCIONALIDADES ESPEC√çFICAS
function testSpecificFeature(featureName) {
    switch (featureName.toLowerCase()) {
        case 'dibujo':
            return testDrawingFeature();
        case 'animacion':
            return testAnimationFeature();
        case 'audio':
            return testAudioFeature();
        case 'jugadores':
            return testPlayerFeature();
        case 'modo':
            return testModeFeature();
        default:
            console.error('‚ùå Funcionalidad no reconocida:', featureName);
            return false;
    }
}

function testDrawingFeature() {
    console.log('üß™ Probando funcionalidad de dibujo...');
    
    const drawingCanvas = document.getElementById('drawing-canvas');
    const colorPicker = document.getElementById('line-color-picker');
    const widthPicker = document.getElementById('line-width-picker');
    const undoBtn = document.getElementById('undo-line');
    
    if (!drawingCanvas || !colorPicker || !widthPicker || !undoBtn) {
        console.error('‚ùå Elementos de dibujo faltantes');
        return false;
    }
    
    console.log('‚úÖ Todos los elementos de dibujo est√°n presentes');
    return true;
}

function testAnimationFeature() {
    console.log('üß™ Probando funcionalidad de animaci√≥n...');
    
    const frameIndicator = document.getElementById('frame-indicator');
    const frameNext = document.getElementById('frame-next');
    const framePrev = document.getElementById('frame-prev');
    const frameAdd = document.getElementById('frame-add');
    const framePlay = document.getElementById('frame-play');
    
    if (!frameIndicator || !frameNext || !framePrev || !frameAdd || !framePlay) {
        console.error('‚ùå Elementos de animaci√≥n faltantes');
        return false;
    }
    
    console.log('‚úÖ Todos los elementos de animaci√≥n est√°n presentes');
    return true;
}

function testAudioFeature() {
    console.log('üß™ Probando funcionalidad de audio...');
    
    const recordBtn = document.getElementById('audio-record-btn');
    const playBtn = document.getElementById('audio-play-btn');
    
    if (!recordBtn || !playBtn) {
        console.error('‚ùå Elementos de audio faltantes');
        return false;
    }
    
    if (typeof MediaRecorder === 'undefined') {
        console.warn('‚ö†Ô∏è MediaRecorder no soportado en este navegador');
        return false;
    }
    
    console.log('‚úÖ Funcionalidad de audio disponible');
    return true;
}

function testPlayerFeature() {
    console.log('üß™ Probando gesti√≥n de jugadores...');
    
    const squadBtn = document.getElementById('global-select-squad-btn');
    const pitchContainer = document.getElementById('pitch-container');
    
    if (!squadBtn || !pitchContainer) {
        console.error('‚ùå Elementos de jugadores faltantes');
        return false;
    }
    
    console.log('‚úÖ Gesti√≥n de jugadores funcional');
    return true;
}

function testModeFeature() {
    console.log('üß™ Probando cambio de modo...');
    
    const modeBtn = document.getElementById('global-mode-toggle');
    const drawingControls = document.getElementById('drawing-mode-controls');
    const animationControls = document.getElementById('animation-mode-controls');
    
    if (!modeBtn || !drawingControls || !animationControls) {
        console.error('‚ùå Elementos de modo faltantes');
        return false;
    }
    
    console.log('‚úÖ Cambio de modo funcional');
    return true;
}

// EXPONER FUNCIONES GLOBALMENTE PARA USO EN CONSOLA
window.runCompleteValidation = runCompleteValidation;
window.testSpecificFeature = testSpecificFeature;

// EJECUTAR VALIDACI√ìN AUTOM√ÅTICA AL CARGAR
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        // setTimeout(runCompleteValidation, 1000); // DESHABILITADO TEMPORALMENTE
    });
} else {
    // setTimeout(runCompleteValidation, 1000); // DESHABILITADO TEMPORALMENTE
}

console.log('üìù Usa runCompleteValidation() para ejecutar todas las pruebas');
console.log('üìù Usa testSpecificFeature("nombre") para probar funcionalidades espec√≠ficas');
console.log('üìù Funcionalidades disponibles: "dibujo", "animacion", "audio", "jugadores", "modo"');
