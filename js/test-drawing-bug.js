// test-drawing-bug.js
// Script de prueba espec√≠fico para verificar el bug del borrado de l√≠neas

console.log('üß™ PRUEBA ESPEC√çFICA: Bug de reaparici√≥n de l√≠neas borradas');

function testDrawingDeletionBug() {
    console.log('\nüîç INICIANDO PRUEBA DE BUG DE BORRADO...\n');
    
    // Verificar que los elementos existen
    const drawingCanvas = document.getElementById('drawing-canvas');
    const clearBtn = document.getElementById('clear-canvas');
    const deleteLineBtn = document.getElementById('delete-line-mode');
    const undoBtn = document.getElementById('undo-line');
    const redoBtn = document.getElementById('redo-line');
    
    if (!drawingCanvas || !clearBtn || !deleteLineBtn) {
        console.error('‚ùå ERROR: Elementos de dibujo no encontrados');
        return false;
    }
    
    console.log('‚úÖ Elementos de dibujo encontrados');
    
    // Verificar que el drawingManager est√° disponible globalmente o accesible
    let drawingManager;
    
    // Intentar acceder al drawingManager desde window o desde los managers
    if (window.main && window.main.drawingManager) {
        drawingManager = window.main.drawingManager;
    } else {
        // Buscar en el DOM si hay alguna forma de acceder
        console.log('‚ö†Ô∏è DrawingManager no accesible globalmente - esto es normal');
        console.log('‚úÖ Los botones deber√≠an funcionar a trav√©s de UIManager');
    }
    
    console.log('\nüìã INSTRUCCIONES PARA PRUEBA MANUAL:');
    console.log('1. üé® Dibuja varias l√≠neas en el canvas');
    console.log('2. üóëÔ∏è Haz clic en "Limpiar l√≠neas" (icono de borrador)');
    console.log('3. ‚úÖ Verifica que todas las l√≠neas desaparezcan');
    console.log('4. üé® Dibuja una nueva l√≠nea');
    console.log('5. ‚ùå Las l√≠neas anteriores NO deben reaparecer');
    console.log('\nüìã PRUEBA ALTERNATIVA CON BORRADOR INDIVIDUAL:');
    console.log('1. üé® Dibuja varias l√≠neas en el canvas');
    console.log('2. ‚úÇÔ∏è Haz clic en "Borrar l√≠nea" (icono de tijeras)');
    console.log('3. üéØ Haz clic en una l√≠nea espec√≠fica para borrarla');
    console.log('4. üé® Dibuja una nueva l√≠nea');
    console.log('5. ‚ùå La l√≠nea borrada NO debe reaparecer');
    
    // Simular clicks en los botones para verificar que no hay errores de consola
    console.log('\nü§ñ SIMULANDO CLICKS EN BOTONES...');
    
    try {
        // Simular click en borrar todo
        const clearEvent = new Event('click');
        clearBtn.dispatchEvent(clearEvent);
        console.log('‚úÖ Bot√≥n "Limpiar l√≠neas" ejecutado sin errores');
    } catch (error) {
        console.error('‚ùå Error al simular click en "Limpiar l√≠neas":', error);
    }
    
    try {
        // Simular click en modo borrar l√≠nea
        const deleteEvent = new Event('click');
        deleteLineBtn.dispatchEvent(deleteEvent);
        console.log('‚úÖ Bot√≥n "Borrar l√≠nea" ejecutado sin errores');
        
        // Desactivar modo borrar
        deleteLineBtn.dispatchEvent(deleteEvent);
        console.log('‚úÖ Modo borrar l√≠nea desactivado');
    } catch (error) {
        console.error('‚ùå Error al simular click en "Borrar l√≠nea":', error);
    }
    
    if (undoBtn && redoBtn) {
        try {
            // Simular clicks en deshacer/rehacer
            const undoEvent = new Event('click');
            const redoEvent = new Event('click');
            
            undoBtn.dispatchEvent(undoEvent);
            console.log('‚úÖ Bot√≥n "Deshacer" ejecutado sin errores');
            
            redoBtn.dispatchEvent(redoEvent);
            console.log('‚úÖ Bot√≥n "Rehacer" ejecutado sin errores');
        } catch (error) {
            console.error('‚ùå Error en botones deshacer/rehacer:', error);
        }
    }
    
    console.log('\nüéØ VERIFICACI√ìN DE CORRECCIONES APLICADAS:');
    console.log('‚úÖ 1. UIManager.clearCanvas() cambiado a clearAllLines()');
    console.log('‚úÖ 2. DrawingManager.handleCanvasClick() limpia undoStack');
    console.log('‚úÖ 3. DrawingManager.startDrawing() limpia undoStack correctamente');
    
    console.log('\nüî¨ ESTADO INTERNO ESPERADO:');
    console.log('- this.lines = [] (vac√≠o despu√©s de borrar)');
    console.log('- this.undoStack = [] (vac√≠o despu√©s de borrar)');
    console.log('- Nuevas l√≠neas no pueden recuperar l√≠neas borradas');
    
    return true;
}

// Funci√≥n para verificar el estado visual del canvas
function checkCanvasState() {
    const drawingCanvas = document.getElementById('drawing-canvas');
    if (!drawingCanvas) {
        console.error('‚ùå Canvas de dibujo no encontrado');
        return false;
    }
    
    const ctx = drawingCanvas.getContext('2d');
    
    // Crear un canvas temporal para comparar
    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = drawingCanvas.width;
    tempCanvas.height = drawingCanvas.height;
    const tempCtx = tempCanvas.getContext('2d');
    
    // Obtener datos de imagen de ambos canvas
    const currentData = ctx.getImageData(0, 0, drawingCanvas.width, drawingCanvas.height);
    const emptyData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
    
    // Comparar si son iguales (canvas vac√≠o)
    let isEmpty = true;
    for (let i = 0; i < currentData.data.length; i += 4) {
        // Verificar si hay alg√∫n pixel no transparente
        if (currentData.data[i + 3] > 0) { // Canal alfa
            isEmpty = false;
            break;
        }
    }
    
    console.log(`üñºÔ∏è Estado del canvas: ${isEmpty ? 'VAC√çO' : 'CONTIENE DIBUJOS'}`);
    return isEmpty;
}

// Funci√≥n de prueba completa
function runDrawingBugTest() {
    console.log('üöÄ EJECUTANDO PRUEBA COMPLETA DEL BUG DE BORRADO\n');
    
    const testsPassed = [];
    const testsFailed = [];
    
    // Prueba 1: Elementos b√°sicos
    try {
        if (testDrawingDeletionBug()) {
            testsPassed.push('Elementos y botones funcionando');
        } else {
            testsFailed.push('Elementos o botones con problemas');
        }
    } catch (e) {
        testsFailed.push('Error en prueba b√°sica: ' + e.message);
    }
    
    // Prueba 2: Estado del canvas
    try {
        checkCanvasState();
        testsPassed.push('Verificaci√≥n de estado del canvas');
    } catch (e) {
        testsFailed.push('Error al verificar canvas: ' + e.message);
    }
    
    // Resumen
    console.log('\nüìä RESUMEN DE PRUEBAS:');
    console.log(`‚úÖ Pasaron: ${testsPassed.length}`);
    testsPassed.forEach(test => console.log(`  - ${test}`));
    
    console.log(`‚ùå Fallaron: ${testsFailed.length}`);
    testsFailed.forEach(test => console.log(`  - ${test}`));
    
    if (testsFailed.length === 0) {
        console.log('\nüéâ ¬°TODAS LAS PRUEBAS PASARON!');
        console.log('üîß Las correcciones aplicadas deber√≠an resolver el bug de reaparici√≥n');
    } else {
        console.log('\n‚ö†Ô∏è ALGUNAS PRUEBAS FALLARON');
        console.log('üîç Revisa los errores arriba para m√°s detalles');
    }
    
    return testsFailed.length === 0;
}

// Exponer funciones globalmente
window.testDrawingDeletionBug = testDrawingDeletionBug;
window.checkCanvasState = checkCanvasState;
window.runDrawingBugTest = runDrawingBugTest;

// Ejecutar prueba autom√°ticamente si el DOM est√° listo
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        // setTimeout(runDrawingBugTest, 2000); // DESHABILITADO TEMPORALMENTE
    });
} else {
    // setTimeout(runDrawingBugTest, 2000); // DESHABILITADO TEMPORALMENTE
}

console.log('üìù Funciones disponibles:');
console.log('  - runDrawingBugTest() - Ejecuta todas las pruebas');
console.log('  - testDrawingDeletionBug() - Prueba espec√≠fica del bug');
console.log('  - checkCanvasState() - Verifica estado visual del canvas');
